{"version":3,"sources":["reducers/calculatorReducer.js","actions/actionTypes.js","reducers/index.js","store.js","components/Calculator.container.js","actions/actions.js","App.js","index.js"],"names":["initialState","currentOutput","valueOne","currentOperator","calculatorReducer","state","arguments","length","undefined","action","type","EQUALS","myResult","eval","Object","_Users_matthewmcintyre_Git_javascript_calculator_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","String","ALL_CLEAR","ADD_NUMBER","result","number","console","log","replace","ADD_DECIMAL","newDecimal","decimal","OPERATOR","operator","__webpack_require__","d","__webpack_exports__","combineReducers","store","createStore","reducer","PageWrapper","styled","div","_templateObject","ButtonWrapper","_templateObject2","NumberWrapper","_templateObject3","OperatorWrapper","_templateObject4","EqualsWrapper","_templateObject5","AcWrapper","_templateObject6","BottomNumberWrapper","_templateObject7","CalculatorWrapper","_templateObject8","OutputSection","_templateObject9","Button","_templateObject10","PlusButton","_templateObject11","props","MinusButton","_templateObject12","MultiplyButton","_templateObject13","DivideButton","_templateObject14","Calculator","_this","this","react_default","a","createElement","onClick","addNumber","addDecimal","allClear","equals","Component","myActions","actionTypes","connect","GlobalStyle","createGlobalStyle","App_templateObject","App","es","Calculator_container","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.a81155f4.chunk.js","sourcesContent":["import {\n  EQUALS,\n  ALL_CLEAR,\n  ADD_NUMBER,\n  ADD_DECIMAL,\n  OPERATOR\n} from \"../actions/actionTypes\";\n\nconst initialState = {\n  //what is displayed on screen\n  currentOutput: \"0\",\n\n  //value is saved here once operator is clicked\n  valueOne: \"\",\n\n  //operator in question goes here\n  //when this exists, change color of buttons...?\n  currentOperator: \"\"\n};\n\nconst calculatorReducer = (state = initialState, action) => {\n  switch (action.type) {\n    //TODO equals must output a max number of digits (14)\n    case EQUALS:\n      // eslint-disable-next-line no-eval\n      let myResult = eval(\n        state.valueOne + state.currentOperator + state.currentOutput\n      );\n\n      return {\n        ...state,\n        currentOutput: String(myResult),\n        currentOperator: \"\"\n      };\n\n    case ALL_CLEAR:\n      return {\n        ...state,\n        currentOutput: \"0\",\n        valueOne: \"\",\n        currentOperator: \"\"\n      };\n\n    //TODO addnumber needs to do the following\n    //1. get rid of zero if it is the first number 80% done - if 0 is pressed it will disappear\n    //2. max number of digits to fit on screen\n    case ADD_NUMBER:\n      let result = state.currentOutput + action.number;\n\n      console.log(state.currentOperator);\n      console.log(state.currentOutput);\n      return {\n        ...state,\n\n        currentOutput: result.replace(/^0+/, \"\")\n      };\n\n    ///https://stackoverflow.com/questions/27628746/need-a-regexp-to-filter-out-all-but-one-decimal-point\n    //THANKYOUUUUUUUU ^\n    case ADD_DECIMAL:\n      let newDecimal = state.currentOutput + action.decimal;\n\n      return {\n        ...state,\n\n        currentOutput: newDecimal.replace(/[^0-9.]|\\.(?=.*\\.)/, \"\")\n      };\n\n    //TODO\n    //1. operator must change outline of the operator button\n    case OPERATOR:\n      return {\n        ...state,\n        currentOperator: action.operator,\n        valueOne: state.currentOutput,\n        currentOutput: \"\"\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default calculatorReducer;\n","export const EQUALS = \"EQUALS\";\nexport const ALL_CLEAR = \"ALL_CLEAR\";\nexport const ADD_NUMBER = \"ADD_NUMBER\";\nexport const ADD_DECIMAL = \"ADD_DECIMAL\";\nexport const OPERATOR = \"OPERATOR\";\n","import { combineReducers } from \"redux\";\nimport calculatorReducer from \"./calculatorReducer\";\n\nexport default combineReducers({ calculatorReducer });\n","import { createStore } from \"redux\";\nimport reducer from \"./reducers/index\";\n\nconst store = createStore(reducer);\n\nexport default store;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\nimport {\n  allClear,\n  equals,\n  addNumber,\n  operator,\n  addDecimal\n} from \"../actions/actions\";\n\nconst PageWrapper = styled.div`\n  height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\n//holds all of the buttons\nconst ButtonWrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 50px);\n  grid-template-rows: repeat(5, 50px);\n  grid-template-areas:\n    \"top top top top\"\n    \"number number number side\"\n    \"number number number side\"\n    \"number number number side\"\n    \"bottomnumber bottomnumber ac ac\";\n  width: 210px;\n  height: 280px;\n  justify-content: space-evenly;\n  grid-gap: 5px;\n  margin-top: 10px;\n`;\n\n//organizes just the numbers\nconst NumberWrapper = styled.div`\n  grid-area: number;\n  display: grid;\n  grid-template-columns: repeat(3, 50px);\n  grid-template-rows: repeat(4, 50px);\n  grid-gap: 5px;\n`;\n\n//organizes just the operators\nconst OperatorWrapper = styled.div`\n  grid-area: top;\n  display: grid;\n  grid-template-columns: repeat(4, 50px);\n  grid-template-rows: repeat(1, 50px);\n  grid-gap: 5px;\n`;\n\n//organizes just the operators\nconst EqualsWrapper = styled.div`\n  grid-area: side;\n  display: grid;\n  grid-template-columns: 50px;\n  grid-template-rows: 160px;\n  grid-gap: 5px;\n`;\n\nconst AcWrapper = styled.div`\n  grid-area: ac;\n  display: grid;\n  grid-template-columns: 105px;\n  grid-template-rows: 50px;\n  grid-gap: 5px;\n`;\n\nconst BottomNumberWrapper = styled.div`\n  grid-area: bottomnumber;\n  display: grid;\n  grid-template-columns: 50px 50px;\n  grid-template-rows: 50px;\n  grid-gap: 5px;\n`;\n\nconst CalculatorWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  background: #2a3d45;\n  width: 250px;\n  height: 400px;\n  padding: 20px;\n  justify-content: center;\n  align-items: center;\n  border-radius: 1px;\n`;\n\nconst OutputSection = styled.div`\n  overflow: scroll;\n  display: flex;\n  align-items: center;\n  font-size: 25px;\n  background: #bcac9b;\n  height: 50px;\n  width: 220px;\n  margin-bottom: 10px;\n  border-radius: 1px;\n`;\n\nconst Button = styled.div`\n  font-size: 20px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: #a4c2a5;\n  border-radius: 2px;\n  &: hover {\n    background: #697c6a;\n  }\n`;\n\nconst PlusButton = styled(Button)`\n  background: ${props => (props.currentOperator === \"+\" ? \"red\" : \"#a4c2a5\")};\n`;\n\nconst MinusButton = styled(Button)`\n  background: ${props => (props.currentOperator === \"-\" ? \"red\" : \"#a4c2a5\")};\n`;\n\nconst MultiplyButton = styled(Button)`\n  background: ${props => (props.currentOperator === \"*\" ? \"red\" : \"#a4c2a5\")};\n`;\n\nconst DivideButton = styled(Button)`\n  background: ${props => (props.currentOperator === \"/\" ? \"red\" : \"#a4c2a5\")};\n`;\n\nclass Calculator extends Component {\n  render() {\n    return (\n      <PageWrapper>\n        <CalculatorWrapper>\n          <OutputSection>{this.props.currentOutput}</OutputSection>\n          <ButtonWrapper>\n            <NumberWrapper>\n              <Button onClick={() => this.props.addNumber(1)}>1</Button>\n              <Button onClick={() => this.props.addNumber(2)}>2</Button>\n              <Button onClick={() => this.props.addNumber(3)}>3</Button>\n              <Button onClick={() => this.props.addNumber(4)}>4</Button>\n              <Button onClick={() => this.props.addNumber(5)}>5</Button>\n              <Button onClick={() => this.props.addNumber(6)}>6</Button>\n              <Button onClick={() => this.props.addNumber(7)}>7</Button>\n              <Button onClick={() => this.props.addNumber(8)}>8</Button>\n              <Button onClick={() => this.props.addNumber(9)}>9</Button>\n            </NumberWrapper>\n\n            <BottomNumberWrapper>\n              <Button onClick={() => this.props.addNumber(0)}>0</Button>\n              <Button onClick={() => this.props.addDecimal(\".\")}>.</Button>\n            </BottomNumberWrapper>\n\n            <OperatorWrapper>\n              <PlusButton\n                currentOperator={this.props.currentOperator}\n                onClick={() => this.props.operator(\"+\")}\n              >\n                +\n              </PlusButton>\n              <MinusButton\n                currentOperator={this.props.currentOperator}\n                onClick={() => this.props.operator(\"-\")}\n              >\n                -\n              </MinusButton>\n              <MultiplyButton\n                currentOperator={this.props.currentOperator}\n                onClick={() => this.props.operator(\"*\")}\n              >\n                *\n              </MultiplyButton>\n              <DivideButton\n                currentOperator={this.props.currentOperator}\n                onClick={() => this.props.operator(\"/\")}\n              >\n                /\n              </DivideButton>\n            </OperatorWrapper>\n\n            <AcWrapper>\n              <Button onClick={() => this.props.allClear()}>AC</Button>\n            </AcWrapper>\n            <EqualsWrapper>\n              <Button onClick={() => this.props.equals()}>=</Button>\n            </EqualsWrapper>\n          </ButtonWrapper>\n        </CalculatorWrapper>\n      </PageWrapper>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  currentOutput: state.calculatorReducer.currentOutput,\n  currentOperator: state.calculatorReducer.currentOperator\n});\n\nconst myActions = {\n  allClear,\n  equals,\n  addNumber,\n  operator,\n  addDecimal\n};\n\nexport default connect(\n  mapStateToProps,\n  myActions\n)(Calculator);\n","import * as actionTypes from \"./actionTypes\";\n\nexport const allClear = () => ({\n  type: actionTypes.ALL_CLEAR\n});\n\nexport const equals = () => ({\n  type: actionTypes.EQUALS\n});\n\nexport const addNumber = number => ({\n  type: actionTypes.ADD_NUMBER,\n  number\n});\n\nexport const addDecimal = decimal => ({\n  type: actionTypes.ADD_DECIMAL,\n  decimal\n});\n\nexport const operator = operator => ({\n  type: actionTypes.OPERATOR,\n  operator\n});\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport Calculator from \"./components/Calculator.container\";\nimport { createGlobalStyle } from \"styled-components\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css?family=Roboto+Mono');\n\n  html {\n    background-color: #7A6C5D;\n    font-family: 'Roboto Mono', monospace;\n  }\n\n  body {\n    height:100%;\n    margin: 0;\n    padding: 0;\n  }\n`;\n\nconst App = () => (\n  <Provider store={store}>\n    <GlobalStyle />\n    <Calculator />\n  </Provider>\n);\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}